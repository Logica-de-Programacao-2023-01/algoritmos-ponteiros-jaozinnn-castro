1.package main

import (
	"fmt"
)

func atualizarValor(p *int, n int) {
	sum := 0
	for i := 1; i <= n; i++ {
		sum += i
	}
	*p = sum
}

func main() {
	num := 0
	atualizarValor(&num, 5)
	fmt.Println(num) // imprime 15
}

2.package main

import (
	"fmt"
)

func atualizarValor(p *int) {
	if *p%2 == 0 {
		*p = 0
	} else {
		*p = 1
	}
}

func main() {
	num := 7
	atualizarValor(&num)
	fmt.Println(num) // imprime 1

	num = 12
	atualizarValor(&num)
	fmt.Println(num) // imprime 0
}

3.package main

import (
	"fmt"
	"strings"
)

func atualizarValor(p *string) {
	runes := []rune(*p)
	n := len(runes)
	for i := 0; i < n/2; i++ {
		runes[i], runes[n-i-1] = runes[n-i-1], runes[i]
	}
	*p = string(runes)
}

func main() {
	str := "Hello, World!"
	atualizarValor(&str)
	fmt.Println(str) // imprime "!dlroW ,olleH"
}

4.package main

import (
	"fmt"
)

func atualizarValor(p *int) {
	num := *p
	lastDigit := num % 10
	num /= 10
	secondLastDigit := num % 10
	*p = lastDigit + secondLastDigit
}

func main() {
	num := 1234
	atualizarValor(&num)
	fmt.Println(num) // imprime 7
}

5.package main

import (
	"fmt"
	"math"
)

func atualizarValor(p *float64) {
	*p = (*p + math.Pi) / 2.0
}

func main() {
	num := 3.14
	atualizarValor(&num)
	fmt.Println(num) // imprime 3.7707963267948966
}

6.package main

import (
	"fmt"
)

type Livro struct {
	Titulo string
	Autor  string
}

func atualizarTitulo(l *Livro) {
	if l.Autor == "Anônimo" {
		l.Titulo = "Desconhecido"
	}
}

func main() {
	livro := Livro{
		Titulo: "Livro X",
		Autor:  "Anônimo",
	}

	atualizarTitulo(&livro)

	fmt.Println(livro.Titulo) // imprime "Desconhecido"
}

7.package main

import (
	"fmt"
)

type Conta struct {
	Saldo   float64
	Titular string
}

func adicionarSaldo(c *Conta, valor float64) {
	c.Saldo += valor
}

func main() {
	conta := Conta{
		Saldo:   100.0,
		Titular: "João",
	}

	adicionarSaldo(&conta, 50.0)

	fmt.Println(conta.Saldo) // imprime 150.0
}

8.package main

import "fmt"

func modifyValue(ptr *int) {
	*ptr = 10 // Modifica o valor da variável apontada pelo ponteiro
}

func main() {
	value := 5
	ptr := &value // Obtém o endereço de memória da variável "value"

	fmt.Println("Antes:", value) // imprime "Antes: 5"

	modifyValue(ptr)

	fmt.Println("Depois:", value) // imprime "Depois: 10"

	// Libera a memória
	ptr = nil
}

9.package main

import (
	"fmt"
)

type Livro struct {
	Titulo string
	Autor  string
	Preco  float64
}

func aplicarDesconto(l *Livro) {
	desconto := l.Preco * 0.1
	l.Preco -= desconto
}

func main() {
	livro := Livro{
		Titulo: "Dom Casmurro",
		Autor:  "Machado de Assis",
		Preco:  50.0,
	}

	aplicarDesconto(&livro)

	fmt.Printf("Livro: %s\nAutor: %s\nPreço com desconto: %.2f\n", livro.Titulo, livro.Autor, livro.Preco)
}

10.package main

import "fmt"

func isPrime(n int) bool {
	if n <= 1 {
		return false
	}
	for i := 2; i*i <= n; i++ {
		if n%i == 0 {
			return false
		}
	}
	return true
}

func generatePrimes(primes *[]int, n int) {
	count := 0
	num := 2
	for count < n {
		if isPrime(num) {
			*primes = append(*primes, num)
			count++
		}
		num++
	}
}

func main() {
	var primes []int
	size := 10

	generatePrimes(&primes, size)

	fmt.Printf("Os primeiros %d números primos são: %v\n", size, primes)
}
